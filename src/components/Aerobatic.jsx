/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ../../public/assets/models/aerobatic_airplane.glb
Author: Kemal Ã‡olak (https://sketchfab.com/kemalcolak)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/aerobatic-airplane-6bdb6d7c221b463c8943a1d58c13f96f
Title: Aerobatic Airplane
*/
// @ts-nocheck

import { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { Matrix4, Quaternion, Vector3 } from "three";
import { updatePlaneAxis } from "../controls";

const x = new Vector3(1, 0, 0);
const y = new Vector3(0, 1, 0);
const z = new Vector3(0, 0, 1);
export const planePosition = new Vector3(0, 3, 7);

const delayedRotMatrix = new Matrix4();
const delayedQuaternion = new Quaternion();

export function Aerobatic(props) {
  const { nodes, materials } = useGLTF("assets/models/aerobatic_airplane.glb");
  const groupRef = useRef();
  const helixMeshRef = useRef();

  useFrame(({ camera }) => {
    updatePlaneAxis(x, y, z, planePosition, camera);

    const rotMatrix = new Matrix4().makeBasis(x, y, z);

    const matrix = new Matrix4()
      .multiply(
        new Matrix4().makeTranslation(
          planePosition.x,
          planePosition.y,
          planePosition.z
        )
      )
      .multiply(rotMatrix);

    groupRef.current.matrixAutoUpdate = false;
    groupRef.current.matrix.copy(matrix);
    groupRef.current.matrixWorldNeedsUpdate = true;

    var quaternionA = new Quaternion().copy(delayedQuaternion);

    // warning! setting the quaternion from the rotation matrix will cause
    // issues that resemble gimbal locks, instead, always use the quaternion notation
    // throughout the slerping phase
    // quaternionA.setFromRotationMatrix(delayedRotMatrix);

    var quaternionB = new Quaternion();
    quaternionB.setFromRotationMatrix(rotMatrix);

    var interpolationFactor = 0.175;
    var interpolatedQuaternion = new Quaternion().copy(quaternionA);
    interpolatedQuaternion.slerp(quaternionB, interpolationFactor);
    delayedQuaternion.copy(interpolatedQuaternion);

    delayedRotMatrix.identity();
    delayedRotMatrix.makeRotationFromQuaternion(delayedQuaternion);

    const cameraMatrix = new Matrix4()
      .multiply(
        new Matrix4().makeTranslation(
          planePosition.x,
          planePosition.y,
          planePosition.z
        )
      )
      .multiply(delayedRotMatrix)
      .multiply(new Matrix4().makeRotationX(-0.08))
      .multiply(new Matrix4().makeTranslation(0, 0.015, 0.3));

    camera.matrixAutoUpdate = false;
    camera.matrix.copy(cameraMatrix);
    camera.matrixWorldNeedsUpdate = true;

    helixMeshRef.current.rotation.z -= 1.0;
  });

  return (
    <group ref={groupRef}>
      <group {...props} dispose={null} scale={0.004} rotation-y={Math.PI / 2}>
        <group position={[0.116, -0.132, 0]} rotation={[0, 0, 0.164]}>
          <mesh
            geometry={nodes.Body_body_0.geometry}
            material={materials.body}
          />
          <mesh
            geometry={nodes.Body_body_front_0.geometry}
            material={materials.body_front}
          />
          <mesh
            geometry={nodes.Body_whell_black_0.geometry}
            material={materials.whell_black}
          />
          <mesh
            geometry={nodes.Body_body_blue_0.geometry}
            material={materials.body_blue}
          />
          <mesh
            geometry={nodes.Body_cocpit_black_0.geometry}
            material={materials.cocpit_black}
          />
        </group>

        <group position={[4.557, 4.488, -0.011]} rotation={[0, 0, 0.164]}>
          <mesh
            geometry={nodes.Engine_body_blue_0.geometry}
            material={materials.body_blue}
            ref={helixMeshRef}
          />
          <mesh
            geometry={nodes.Engine_engine_metalic_0.geometry}
            material={materials.engine_metalic}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("assets/models/aerobatic_airplane.glb");
